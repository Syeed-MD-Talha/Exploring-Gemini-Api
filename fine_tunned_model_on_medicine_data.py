# -*- coding: utf-8 -*-
"""fine_tunned_model_on_medicine_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1spXmrr7kdl2MKdr_jcTX14AgP0wPsqR-

##### Copyright 2024 Google LLC.

# Gemini API: Model tuning with Python

<table class="tfo-notebook-buttons" align="left">
  <td>
    <a target="_blank" href="https://ai.google.dev/gemini-api/docs/model-tuning/python"><img src="https://ai.google.dev/static/site-assets/images/docs/notebook-site-button.png" height="32" width="32" />View on ai.google.dev</a>
  </td>
    <td>
    <a target="_blank" href="https://colab.research.google.com/github/google/generative-ai-docs/blob/main/site/en/gemini-api/docs/model-tuning/python.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/google/generative-ai-docs/blob/main/site/en/gemini-api/docs/model-tuning/python.ipynb"><img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on GitHub</a>
  </td>
</table>

In this notebook, you'll learn how to get started with the tuning service using the Python client library for the Gemini API. Here, you'll learn how to tune the text model behind the Gemini API's text generation service.

## Setup

### Install the client library
"""

!pip install -q google-generativeai

"""### Import libraries"""

import google.generativeai as genai

from google.colab import userdata
genai.configure(api_key="Your API KEY")

"""You can check you existing tuned models with the `genai.list_tuned_model` method."""

for i, m in zip(range(5), genai.list_tuned_models()):
  print(m.name)

"""## Create tuned model

To create a tuned model, you need to pass your dataset to the model in the `genai.create_tuned_model` method. You can do this be directly defining the input and output values in the call or importing from a file into a dataframe to pass to the method.

For this example, you will tune a model to generate the next number in the sequence. For example, if the input is `1`, the model should output `2`. If the input is `one hundred`, the output should be `one hundred one`.
"""

base_model = [
    m for m in genai.list_models()
    if "createTunedModel" in m.supported_generation_methods and
    "flash" in m.name][0]
base_model

import random

name = f'generate-num-{random.randint(0,10234)}'
operation = genai.create_tuned_model(
    # You can use a tuned model here too. Set `source_model="tunedModels/..."`
    source_model=base_model.name,
    training_data = [
    {
        'text_input': 'What is Tab.Reelife Ds?',
        'output': 'Tab.Reelife Ds is a medication.'
    },
    {
        'text_input': 'What is Tab.chear 25?',
        'output': 'Tab.chear 25 is a medication.'
    },
    {
        'text_input': 'What is Tab.propanol 40?',
        'output': 'Tab.propanol 40 is a medication.'
    },
    {
        'text_input': 'What is Tab.Eostem 20?',
        'output': 'Tab.Eostem 20 is a medication.'
    },
    {
        'text_input': 'What is Tab.Renova xr 665?',
        'output': 'Tab.Renova xr 665 is a medication.'
    },
    {
        'text_input': 'What is Tab.Tolfem 200?',
        'output': 'Tab.Tolfem 200 is a medication.'
    },
    {
        'text_input': 'What is Tab.Vergon?',
        'output': 'Tab.Vergon is a medication.'
    },
    {
        'text_input': 'What is Carmelus Eye Drop?',
        'output': 'Carmelus Eye Drop is a medication for the eyes.'
    },
    {
        'text_input': 'What is Tab. Migrium 10?',
        'output': 'Tab. Migrium 10 is a medication.'
    },
    {
        'text_input': 'What is Tab. Topirva 25?',
        'output': 'Tab. Topirva 25 is a medication.'
    },
    {
        'text_input': 'What is Tab. Tufnil (200mg)?',
        'output': 'Tab. Tufnil (200mg) is a medication.'
    },
    {
        'text_input': 'What is Tab. Brezofil 200mg?',
        'output': 'Tab. Brezofil 200mg is a medication.'
    },
    {
        'text_input': 'What is Tab. Montair 10mg?',
        'output': 'Tab. Montair 10mg is a medication.'
    },
    {
        'text_input': 'What is Tab. Progut MUPS 20mg?',
        'output': 'Tab. Progut MUPS 20mg is a medication.'
    },
    {
        'text_input': 'What is Tab. Fexofast 120mg?',
        'output': 'Tab. Fexofast 120mg is a medication.'
    },
    {
        'text_input': 'What is Tab. Alben DS 400mg?',
        'output': 'Tab. Alben DS 400mg is a medication.'
    },
    {
        'text_input': 'What is Tab. Linatab 2.5 mg+500 mg?',
        'output': 'Tab. Linatab 2.5 mg+500 mg is a medication.'
    },
    {
        'text_input': 'What is Cap. Atix (400mg)?',
        'output': 'Cap. Atix (400mg) is a medication.'
    },
    {
        'text_input': 'What is Tab. Efodio (10mg)?',
        'output': 'Tab. Efodio (10mg) is a medication.'
    },
    {
        'text_input': 'What is Tab. Panoset (0.5mg)?',
        'output': 'Tab. Panoset (0.5mg) is a medication.'
    },
    {
        'text_input': 'What is Tab. Progut Mups (20mg)?',
        'output': 'Tab. Progut Mups (20mg) is a medication.'
    },
    {
        'text_input': 'What is Tab. Utramal Retard (50mg)?',
        'output': 'Tab. Utramal Retard (50mg) is a medication.'
    },
    # Additional variations for better recognition
    {
        'text_input': 'Tell me about Tab.Reelife Ds',
        'output': 'Tab.Reelife Ds is a medication.'
    },
    {
        'text_input': 'Do you know what Tab.chear 25 is?',
        'output': 'Tab.chear 25 is a medication.'
    },
    {
        'text_input': 'Information on Tab.propanol 40',
        'output': 'Tab.propanol 40 is a medication.'
    },
    {
        'text_input': 'Can you describe Tab.Eostem 20?',
        'output': 'Tab.Eostem 20 is a medication.'
    },
    {
        'text_input': 'I need information about Carmelus Eye Drop',
        'output': 'Carmelus Eye Drop is a medication for the eyes.'
    },
    {
        'text_input': 'What can you tell me about Tab. Montair 10mg?',
        'output': 'Tab. Montair 10mg is a medication.'
    },
    {
        'text_input': 'Is Cap. Atix (400mg) a medicine?',
        'output': 'Yes, Cap. Atix (400mg) is a medication.'
    },
    {
        'text_input': 'Tell me what Tab. Utramal Retard (50mg) is',
        'output': 'Tab. Utramal Retard (50mg) is a medication.'
    }
   ],
    id = name,
    epoch_count = 100,
    batch_size=4,
    learning_rate=0.001,
)

"""Your tuned model is immediately added to the list of tuned models, but its status is set to "creating" while the model is tuned."""

model = genai.get_tuned_model(f'tunedModels/{name}')

model

model.state

"""### Check tuning progress

Use `metadata` to check the state:
"""

operation.metadata

"""Wait for the training to finish using `operation.result()`, or `operation.wait_bar()`"""

import time

for status in operation.wait_bar():
  time.sleep(30)

"""You can cancel your tuning job any time using the `cancel()` method. Uncomment the line below and run the code cell to cancel your job before it finishes."""

# operation.cancel()

"""Once the tuning is complete, you can view the loss curve from the tuning results. The [loss curve](https://ai.google.dev/gemini-api/docs/model-tuning#recommended_configurations) shows how much the model's predictions deviate from the ideal outputs."""

import pandas as pd
import seaborn as sns

model = operation.result()

snapshots = pd.DataFrame(model.tuning_task.snapshots)

sns.lineplot(data=snapshots, x = 'epoch', y='mean_loss')

"""## Evaluate your model

You can use the `genai.generate_content` method and specify the name of your model to test your model performance.
"""

model = genai.GenerativeModel(model_name=f'tunedModels/{name}')

result = model.generate_content('tell me a medicine name')
result.text

!pip install Pillow==10.3.0

from google.generativeai import types
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# Create safety settings that are less restrictive
safety_settings = {
    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
}

# Make the API call with custom safety settings
result = model.generate_content(
    contents='Tell me what Tab. Utramal Retard (50mg) is',
    safety_settings=safety_settings
)

print(result.text)  # Use .text to get the actual content







"""It really seems to have picked up the task despite the limited examples, but "next" is a simple concept, see the [tuning guide](https://ai.google.dev/gemini-api/docs/model-tuning) for more guidance on improving performance.

## Update the description

You can update the description of your tuned model any time using the `genai.update_tuned_model` method.
"""

genai.update_tuned_model(f'tunedModels/{name}', {"description":"This is my model."});

model = genai.get_tuned_model(f'tunedModels/{name}')

model.description

"""## Delete the model

You can clean up your tuned model list by deleting models you no longer need. Use the `genai.delete_tuned_model` method to delete a model. If you canceled any tuning jobs, you may want to delete those as their performance may be unpredictable.
"""

#genai.delete_tuned_model(f'tunedModels/{name}')

"""The model no longer exists:"""

try:
  m = genai.get_tuned_model(f'tunedModels/{name}')
  print(m)
except Exception as e:
  print(f"{type(e)}: {e}")

result = model.generate_content('What is Tab.Reelife Ds?')    # Roman numeral 3
result.text